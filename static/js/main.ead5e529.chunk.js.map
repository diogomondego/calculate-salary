{"version":3,"sources":["components/InputFullSalary.js","helpers/formatters.js","components/InputReadOnly.js","components/ProportionBar.js","helpers/salary.js","App.js","index.js"],"names":["InputFullSalary","handleInputChange","event","newValue","target","value","props","onSalaryChange","currentValue","this","className","autoFocus","id","type","onChange","min","step","htmlFor","Component","moneyFormatter","Intl","NumberFormat","style","currency","InputReadOnly","color","percentage","label","formattedPercentage","toFixed","replace","formatPercentage","formattedValue","format","formatMoney","readOnly","fontWeight","ProportionBar","inss","irpf","netSalary","colorINSS","colorIRPF","colorNetSalary","display","flexDirection","alignItems","justifyContent","backgroundColor","width","height","INSS_TABLE","minValue","maxValue","difference","discountPercentage","discountValue","round","calculateSalaryFrom","fullSalary","baseINSS","discountINSS","i","length","currentItem","calculateDiscountINSS","baseIRPF","discountIRPF","calculateDiscountIRPF","percentINSS","percentIRPF","percentNetSalary","App","handleFullSalaryChange","setState","state","salaryObject","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ead5e529.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class InputFullSalary extends Component {\n  handleInputChange = (event) => {\n    const newValue = +event.target.value\n    this.props.onSalaryChange(newValue)\n  }\n  render() {\n    const { currentValue } = this.props\n\n    return (\n      <div className=\"input-field col s12\">\n        <input autoFocus id='inputFullSalary' type='number' value={currentValue} onChange={this.handleInputChange}\n          min=\"1000\" step=\"100\" />\n        <label className=\"active\" htmlFor=\"inputFullSalary\">Sal√°rio Bruto</label>\n\n      </div>\n    )\n  }\n}\n","// const numberFormatter = Intl.NumberFormat('pt-BR')\n\nconst moneyFormatter = Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' })\n\n// function formatNumber(value) {\n//   return numberFormatter.format(value)\n// }\n\nfunction formatMoney(value) {\n  return moneyFormatter.format(value)\n}\n\nfunction formatPercentage(value) {\n  return `${value.toFixed(2).replace('.', ',')}%`\n}\n\nexport { formatMoney, formatPercentage }","import React, { Component } from 'react'\nimport { formatMoney, formatPercentage } from '../helpers/formatters'\n\nexport default class InputReadOnly extends Component {\n  render() {\n    const { color = 'black', value, percentage = 0, label } = this.props\n\n    const id = 'input' + label\n    const formattedPercentage = percentage > 0 ? `(${formatPercentage(percentage)})` : ''\n\n    const formattedValue = `${formatMoney(value)} ${formattedPercentage}`\n\n    return (\n      <div className=\"input-field col s12 m6 l3\">\n        <input id={id} value={formattedValue} readOnly style={{ color, fontWeight: 'bold' }} />\n        <label className=\"active\" htmlFor=\"inputReadOnly\">{label}</label>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class ProportionBar extends Component {\n  render() {\n    const { inss, irpf, netSalary, colorINSS = 'orange', colorIRPF = 'red', colorNetSalary = 'green' } = this.props\n\n    return (\n      <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', justifyContent: 'flex-start' }}>\n        <div style={{ backgroundColor: colorINSS, width: inss + '%', height: '20px' }} />\n        <div style={{ backgroundColor: colorIRPF, width: irpf + '%', height: '20px' }} />\n        <div style={{ backgroundColor: colorNetSalary, width: netSalary + '%', height: '20px' }} />\n      </div>\n    )\n  }\n}\n","// Fonte: https://www.todacarreira.com/calculo-salario-liquido/\r\n\r\nconst INSS_TABLE = [\r\n  {\r\n    id: 1,\r\n    minValue: 0,\r\n    maxValue: 1045,\r\n    difference: 1045 - 0,\r\n    discountPercentage: 0.075,\r\n    discountValue: -1,\r\n  },\r\n  {\r\n    id: 2,\r\n    minValue: 1045.01,\r\n    maxValue: 2089.6,\r\n    difference: 2089.6 - 1045,\r\n    discountPercentage: 0.09,\r\n  },\r\n  {\r\n    id: 3,\r\n    minValue: 2089.61,\r\n    maxValue: 3134.4,\r\n    difference: 3134.4 - 2089.6,\r\n    discountPercentage: 0.12,\r\n  },\r\n  {\r\n    id: 4,\r\n    minValue: 3134.41,\r\n    maxValue: 6101.06,\r\n    difference: 6101.06 - 3134.4,\r\n    discountPercentage: 0.14,\r\n  },\r\n];\r\n\r\nfunction round(value) {\r\n  return +value.toFixed(2);\r\n}\r\n\r\nfunction calculateDiscountINSS(baseINSS) {\r\n  let discountINSS = 0;\r\n\r\n  if (baseINSS > 6101.07) {\r\n    return 713.1;\r\n  }\r\n\r\n  for (var i = 0; i < INSS_TABLE.length; i++) {\r\n    var currentItem = INSS_TABLE[i];\r\n    let discountValue = 0;\r\n\r\n    if (baseINSS > currentItem.maxValue) {\r\n      // prettier-ignore\r\n      discountValue = round(currentItem.difference * currentItem.discountPercentage);\r\n\r\n      discountINSS += discountValue;\r\n    } else {\r\n      // prettier-ignore\r\n      discountValue = round((baseINSS - currentItem.minValue) * currentItem.discountPercentage);\r\n\r\n      discountINSS += discountValue;\r\n      break;\r\n    }\r\n  }\r\n\r\n  discountINSS = round(discountINSS);\r\n\r\n  return discountINSS;\r\n}\r\n\r\nfunction calculateDiscountIRPF(baseIRPF) {\r\n  let discountIRPF = baseIRPF < 1903.98\r\n    ? 0\r\n    : baseIRPF < 2826.65\r\n      ? round(baseIRPF * 0.075) - 142.8\r\n      : baseIRPF < 3751.05\r\n        ? round(baseIRPF * 0.15) - 354.8\r\n        : baseIRPF < 4664.68\r\n          ? round(baseIRPF * 0.225) - 636.13\r\n          : round(baseIRPF * 0.275) - 869.36;\r\n\r\n  discountIRPF = round(discountIRPF);\r\n\r\n  return discountIRPF;\r\n}\r\n\r\nfunction calculateSalaryFrom(fullSalary) {\r\n  const baseINSS = +fullSalary;\r\n  const discountINSS = calculateDiscountINSS(baseINSS);\r\n\r\n  const baseIRPF = baseINSS - discountINSS;\r\n  const discountIRPF = calculateDiscountIRPF(baseIRPF);\r\n\r\n  const netSalary = baseINSS - discountINSS - discountIRPF;\r\n\r\n  const percentINSS = +((discountINSS / fullSalary) * 100).toFixed(2)\r\n  const percentIRPF = +((discountIRPF / fullSalary) * 100).toFixed(2)\r\n  const percentNetSalary = +((netSalary / fullSalary) * 100).toFixed(2)\r\n\r\n  return {\r\n    baseINSS,\r\n    discountINSS,\r\n    baseIRPF,\r\n    discountIRPF,\r\n    netSalary,\r\n    percentINSS,\r\n    percentIRPF,\r\n    percentNetSalary,\r\n  };\r\n}\r\n\r\nexport { calculateSalaryFrom };\r\n","import React, { Component } from 'react';\nimport InputFullSalary from './components/InputFullSalary';\nimport InputReadOnly from './components/InputReadOnly';\nimport ProportionBar from './components/ProportionBar';\nimport { calculateSalaryFrom } from './helpers/salary';\n\nconst COLOR_INSS = '#e67e22'\nconst COLOR_IRPF = '#c0392b'\nconst COLOR_NET_SALARY = '#16a085'\n\nexport default class App extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      fullSalary: 1000,\n    }\n  }\n\n  handleFullSalaryChange = (newValue) => {\n    this.setState({ fullSalary: newValue })\n  }\n\n  render() {\n    const { fullSalary } = this.state\n\n    const salaryObject = calculateSalaryFrom(fullSalary)\n    const { baseINSS, baseIRPF, discountINSS, discountIRPF, netSalary, percentINSS, percentIRPF, percentNetSalary } = salaryObject\n\n    return (\n      <div className=\"container\">\n        <h1 className='center'>Sal√°rio L√≠quido</h1>\n        <div className='row'>\n          <InputFullSalary currentValue={fullSalary} onSalaryChange={this.handleFullSalaryChange} />\n        </div>\n        <div className='row'>\n          <InputReadOnly label=\"Base INSS\" value={baseINSS} />\n          <InputReadOnly label=\"Desconto INSS\" value={discountINSS} percentage={percentINSS} color={COLOR_INSS} />\n          <InputReadOnly label=\"Base IRPF\" value={baseIRPF} />\n          <InputReadOnly label=\"Desconto IRPF\" value={discountIRPF} percentage={percentIRPF} color={COLOR_IRPF} />\n          <InputReadOnly label=\"Sal√°rio l√≠quido\" value={netSalary} percentage={percentNetSalary} color={COLOR_NET_SALARY} />\n        </div>\n        <ProportionBar inss={percentINSS} irpf={percentIRPF} netSalary={percentNetSalary} colorINSS={COLOR_INSS} colorIRPF={COLOR_IRPF} colorNetSalary={COLOR_NET_SALARY} />\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'materialize-css/dist/css/materialize.min.css';\nimport './index.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}